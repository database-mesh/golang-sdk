// Copyright 2022 SphereEx Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha1

import "k8s.io/apimachinery/pkg/runtime"

func (in *DatabaseMySQL) DeepCopyInto(out *DatabaseMySQL) {
	*out = *in
	out.Host = in.Host
	out.Port = in.Port
	out.User = in.User
	out.Password = in.Password
	out.DB = in.DB
	out.PoolSize = in.PoolSize
	out.ServerVersion = in.ServerVersion
}

func (in *DatabaseMySQL) DeepCopy() *DatabaseMySQL {
	if in == nil {
		return nil
	}
	out := new(DatabaseMySQL)
	in.DeepCopyInto(out)
	return out
}

func (in *DatabaseService) DeepCopyInto(out *DatabaseService) {
	*out = *in

	in.DatabaseMySQL.DeepCopyInto(out.DatabaseMySQL)
}

func (in *DatabaseService) DeepCopy() *DatabaseService {
	if in == nil {
		return nil
	}
	out := new(DatabaseService)
	in.DeepCopyInto(out)
	return out
}

func (in *VirtualDatabaseService) DeepCopyInto(out *VirtualDatabaseService) {
	*out = *in

	out.Name = in.Name
	out.TrafficStrategy = in.TrafficStrategy
	out.DataShard = in.DataShard
	out.QoSClaim = in.QoSClaim
	in.DatabaseService.DeepCopyInto(&out.DatabaseService)
}

func (in *VirtualDatabaseService) DeepCopy() *VirtualDatabaseService {
	if in == nil {
		return nil
	}
	out := new(VirtualDatabaseService)
	in.DeepCopyInto(out)
	return out
}

func (in *VirtualDatabaseSpec) DeepCopyInto(out *VirtualDatabaseSpec) {
	*out = *in

	out.DatabaseClassName = in.DatabaseClassName
	if in.Services != nil {
		in, out := &in.Services, &out.Services
		*out = make([]VirtualDatabaseService, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

func (in *VirtualDatabaseSpec) DeepCopy() *VirtualDatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(VirtualDatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

func (in *VirtualDatabaseStatus) DeepCopyInto(out *VirtualDatabaseStatus) {
	*out = *in
}

func (in *VirtualDatabaseStatus) DeepCopy() *VirtualDatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(VirtualDatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualDatabase) DeepCopyInto(out *VirtualDatabase) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Auth.
func (in *VirtualDatabase) DeepCopy() *VirtualDatabase {
	if in == nil {
		return nil
	}
	out := new(VirtualDatabase)
	in.DeepCopyInto(out)
	return out
}

func (in *VirtualDatabase) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VirtualDatabaseList) DeepCopyInto(out *VirtualDatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]VirtualDatabase, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VirtualDatabaseList.
func (in *VirtualDatabaseList) DeepCopy() *VirtualDatabaseList {
	if in == nil {
		return nil
	}
	out := new(VirtualDatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *VirtualDatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}
